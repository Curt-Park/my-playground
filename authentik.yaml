---
networks:
  ingress:
    name: ingress
    external: true

volumes:
  database: {}
  redis: {}
  media: {}
  certs: {}
  custom-templates: {}


services:
  authentik-db:
    image: docker.io/library/postgres:16-alpine
    container_name: authentik-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      POSTGRES_PASSWORD: ${AUTHENTIK_PG_PASS}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    volumes:
      - database:/var/lib/postgresql/data
    networks:
      - ingress
    restart: unless-stopped

  authentik-mq:
    image: docker.io/library/redis:alpine
    container_name: authentik-mq
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    networks:
      - ingress
    restart: unless-stopped

  authentik:
    image: ghcr.io/goauthentik/server:2024.8.3
    container_name: authentik
    command: server
    labels:
      - traefik.enable=true
      - traefik.http.routers.authentik.entrypoints=websecure
      - traefik.http.routers.authentik.rule=Host(`${DOMAIN}`)
      - traefik.http.services.authentik.loadbalancer.server.port=9000
    ports:
      - "${COMPOSE_PORT_HTTP:-9080}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    environment:
      AUTHENTIK_REDIS__HOST: authentik-mq
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    depends_on:
      - authentik-db
      - authentik-mq
    volumes:
      - media:/media
      - custom-templates:/templates
    networks:
      - ingress
    restart: unless-stopped

  authentik-worker:
    image: ghcr.io/goauthentik/server:2024.8.3
    container_name: authentik-worker
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik-mq
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    depends_on:
      - authentik-db
      - authentik-mq
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - certs:/certs
      - media:/media
      - custom-templates:/templates
    networks:
      - ingress
    restart: unless-stopped

  authentik-proxy:
    image: ghcr.io/goauthentik/proxy:2024.8.3
    container_name: authentik-proxy
    environment:
      AUTHENTIK_HOST: https://${DOMAIN}
      AUTHENTIK_INSECURE: "false"
      AUTHENTIK_TOKEN: ${AUTHENTIK_ACCESS_TOKEN}
      AUTHENTIK_DEBUG: true
    labels:
      - traefik.enable=true
      - traefik.port=9000
      - traefik.http.routers.authentik.rule=Host(`${DOMAIN}`) && PathPrefix(`/outpost.goauthentik.io/`)
      # `authentik-proxy` refers to the service name in the compose file.
      - traefik.http.middlewares.authentik.forwardauth.address=http://authentik-proxy:9000/outpost.goauthentik.io/auth/traefik
      - traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version
    networks:
      - ingress
    restart: unless-stopped
